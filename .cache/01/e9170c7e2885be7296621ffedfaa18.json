{"id":"assets/js/eximport.js","dependencies":[{"name":"/home/arma7x/Desktop/New/kaios/greg/package.json","includedInParent":true,"mtime":1656031665164},{"name":"./helper.js","loc":{"line":3,"column":29,"index":110},"parent":"/home/arma7x/Desktop/New/kaios/greg/application/assets/js/eximport.js","resolved":"/home/arma7x/Desktop/New/kaios/greg/application/assets/js/helper.js"},{"name":"../../app.js","loc":{"line":4,"column":23,"index":148},"parent":"/home/arma7x/Desktop/New/kaios/greg/application/assets/js/eximport.js","resolved":"/home/arma7x/Desktop/New/kaios/greg/application/app.js"},{"name":"ical","loc":{"line":101,"column":23,"index":2591},"parent":"/home/arma7x/Desktop/New/kaios/greg/application/assets/js/eximport.js","resolved":"/home/arma7x/Desktop/New/kaios/greg/node_modules/ical/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.list_ics = exports.fetch_ics = exports.export_ical = void 0;\nexports.loadICS = loadICS;\nexports.parse_ics = void 0;\n\nvar _helper = require(\"./helper.js\");\n\nvar _app = require(\"../../app.js\");\n\nvar export_ical = function export_ical(filename, event_data) {\n  if (!navigator.getDeviceStorage) return false;\n  var sdcard = navigator.getDeviceStorage(\"sdcard\");\n  var request_del = sdcard.delete(filename);\n\n  request_del.onsuccess = function () {};\n\n  setTimeout(function () {\n    // convert\n    var data = event_data;\n    var result = \"\";\n    result += \"BEGIN:VCALENDAR\" + \"\\r\\n\";\n    result += \"VERSION:2.0\" + \"\\r\\n\";\n    result += \"PRODID:GREG\" + \"\\r\\n\";\n    result += \"METHOD:PUBLISHED\" + \"\\r\\n\";\n    data.forEach(function (e) {\n      var index = -1;\n\n      for (var key in e) {\n        index++;\n        if (index == 0) result += \"BEGIN:VEVENT\" + \"\\r\\n\";\n\n        if (key != \"BEGIN\" && key != \"END\" && key != \"date\" && key != \"time_start\" && key != \"time_end\" && key != \"dateStart\" && key != \"dateEnd\" && key != \"notification\" && key != \"alarm\" && key != \"isSubscription\" && key != \"multidayevent\" && key != \"alarmTrigger\" && key != \"rrule_\") {\n          result += \"\".concat(key, \":\").concat(e[key]) + \"\\r\\n\";\n        }\n\n        if (index == Object.keys(e).length - 1) result += \"END:VEVENT\" + \"\\r\\n\";\n      }\n    });\n    result += \"END:VCALENDAR\" + \"\\r\\n\";\n    var file = new Blob([result], {\n      type: \"text/calendar\"\n    });\n    var request = sdcard.addNamed(file, filename);\n\n    request.onsuccess = function () {\n      (0, _helper.side_toaster)(\"<img src='assets/image/E25C.svg'>\", 2500);\n    };\n\n    request.onerror = function () {\n      (0, _helper.toaster)(\"Unable to write the file\", 2000);\n    };\n  }, 2000);\n}; // //////////\n// /LIST ICS\n// ////////////\n\n\nexports.export_ical = export_ical;\n\nvar list_ics = function list_ics() {\n  var file_list = [];\n\n  var cb = function cb(result) {\n    file_list.push(result);\n    var fn = result.split(\"/\");\n    fn = fn[fn.length - 1];\n    if (fn == \"greg.ics\") return false;\n    document.querySelector(\"div#options div#import-text\").style.display = \"block\";\n    document.querySelector(\"div#options div#import-text\").insertAdjacentHTML(\"afterend\", '<button class=\"item dynamic\" data-function=\"import\" data-filename=\"' + result + '\">' + fn + \"</button>\");\n  };\n\n  (0, _helper.list_files)(\"ics\", cb);\n}; // /////////////\n// /PARSE ICS\n// /////////////\n\n\nexports.list_ics = list_ics;\n\nvar parse_ics = function parse_ics(data, callback, saveOnDevice, subscription) {\n  var ical = require(\"ical\");\n\n  var datas = ical.parseICS(data);\n  var last_uid;\n  var last_date;\n\n  for (var k in datas) {\n    if (datas.hasOwnProperty(k)) {\n      var ev = datas[k];\n\n      if (datas[k].type == \"VEVENT\") {\n        //date start\n        var dateStart = void 0,\n            timeStart = void 0;\n\n        if (ev.start) {\n          var DTstart = new Date(ev.start);\n          dateStart = DTstart.getFullYear() + \"-\" + \"0\".concat(DTstart.getMonth() + 1).slice(-2) + \"-\" + \"0\".concat(DTstart.getDate()).slice(-2);\n          timeStart = \"0\".concat(DTstart.getHours()).slice(-2) + \":\" + \"0\".concat(DTstart.getMinutes()).slice(-2) + \":\" + \"0\".concat(DTstart.getSeconds()).slice(-2);\n        } //date end\n\n\n        var dateEnd = void 0,\n            timeEnd = void 0;\n\n        if (ev.end) {\n          var _DTstart = new Date(ev.end);\n\n          dateEnd = _DTstart.getFullYear() + \"-\" + \"0\".concat(_DTstart.getMonth() + 1).slice(-2) + \"-\" + \"0\".concat(_DTstart.getDate()).slice(-2);\n          timeEnd = \"0\".concat(_DTstart.getHours()).slice(-2) + \":\" + \"0\".concat(_DTstart.getMinutes()).slice(-2) + \":\" + \"0\".concat(_DTstart.getSeconds()).slice(-2);\n        } //multiday event\n\n\n        var multidayevent = false;\n\n        if (ev.end && ev.start) {\n          if (new Date(ev.end) > new Date(ev.start)) {\n            multidayevent = true;\n          } //all day events have the time 00:00:00 but the start end date consecutive\n\n\n          if (new Date(ev.end) > new Date(ev.start) && timeStart == \"00:00:00\" && timeEnd == \"00:00:00\") {\n            multidayevent = false;\n          }\n        }\n\n        var parse_rrule = function parse_rrule() {\n          var feedback = \"none\";\n\n          if (ev.rrule != null || ev.rrule != undefined) {\n            var a = ev.rrule;\n            feedback = a.freq; //console.log(ev.rrule);\n          }\n\n          return feedback;\n        };\n\n        var imp = {\n          BEGIN: \"VEVENT\",\n          UID: ev.uid,\n          SUMMARY: ev.summary,\n          LOCATION: ev.location,\n          DESCRIPTION: ev.description,\n          ATTACH: ev.attach,\n          RRULE: ev.rrule,\n          \"LAST-MODIFIED\": ev.lastmodified,\n          CLASS: ev.class,\n          DTSTAMP: ev.dtstamp,\n          DTSTART: ev.start,\n          DTEND: ev.end,\n          END: \"VEVENT\",\n          isSubscription: subscription,\n          multidayevent: multidayevent,\n          dateStart: dateStart,\n          time_start: timeStart,\n          dateEnd: dateEnd,\n          time_end: timeEnd,\n          notification: \" \",\n          alarm: \"none\",\n          rrule_: parse_rrule()\n        };\n\n        _app.events.push(imp);\n\n        last_uid = imp.UID;\n        last_date = imp.DTSTART;\n      }\n    }\n  }\n\n  callback(last_uid, last_date);\n\n  if (saveOnDevice) {\n    var without_subscription = _app.events.filter(function (events) {\n      return events.isSubscription === false;\n    });\n\n    localforage.setItem(\"events\", without_subscription).then(function (value) {\n      // events = value;\n      (0, _helper.side_toaster)(\"<img src='assets/image/E25C.svg'>\", 2500);\n    }).catch(function (err) {\n      console.log(err);\n    });\n  }\n}; /////////////\n///FETCH ICS\n///////////\n\n\nexports.parse_ics = parse_ics;\n\nvar fetch_ics = function fetch_ics(url, cb) {\n  var xhttp = new XMLHttpRequest({\n    mozSystem: true\n  });\n  xhttp.open(\"GET\", url + \"?time=\" + new Date().getTime(), true);\n  xhttp.timeout = 2000;\n\n  xhttp.onprogress = function () {\n    (0, _helper.side_toaster)(\"loading subscriptions\", 2000);\n  };\n\n  xhttp.onload = function () {\n    if (xhttp.readyState === xhttp.DONE && xhttp.status === 200) {\n      var data = xhttp.response;\n      parse_ics(data, cb, false, true);\n      (0, _helper.side_toaster)(\"subscriptions loaded\", 2000);\n    }\n  };\n\n  xhttp.onerror = function () {\n    (0, _helper.side_toaster)(\"subscription could not be loaded\", 2000);\n  };\n\n  xhttp.send(null);\n};\n\nexports.fetch_ics = fetch_ics;\n\nfunction share(url, name) {\n  var activity = new MozActivity({\n    name: \"share\",\n    data: {\n      type: \"text/calendar\",\n      number: 1,\n      blobs: [url],\n      filenames: [name]\n    }\n  });\n\n  activity.onsuccess = function () {};\n\n  activity.onerror = function () {};\n} // ///////////////////////\n// ///Load ICS///////////\n// /////////////////////\n\n\nfunction loadICS(filename, callback) {\n  var sdcard = navigator.getDeviceStorage(\"sdcard\");\n  var request = sdcard.get(filename);\n\n  request.onsuccess = function () {\n    var file = this.result;\n    var reader = new FileReader();\n\n    reader.onerror = function (event) {\n      (0, _helper.toaster)(\"can't read file\", 3000);\n      reader.abort();\n    };\n\n    reader.onloadend = function (event) {\n      parse_ics(event.target.result, callback, true, false);\n      document.getElementById(\"import-text\").style.display = \"block\";\n    };\n\n    reader.readAsText(file);\n  };\n\n  request.onerror = function () {\n    console.warn(\"Unable to get the file: \" + this.error);\n  };\n}"},"sourceMaps":null,"error":null,"hash":"ca7c1b5a75258f03db20cedb647ebd2d","cacheData":{"env":{}}}