{"id":"../node_modules/rrule/dist/esm/dateutil.js","dependencies":[{"name":"/home/arma7x/Desktop/New/kaios/greg/package.json","includedInParent":true,"mtime":1656031665164},{"name":"/home/arma7x/Desktop/New/kaios/greg/node_modules/rrule/package.json","includedInParent":true,"mtime":1655998719762},{"name":"./helpers","loc":{"line":14,"column":57,"index":642},"parent":"/home/arma7x/Desktop/New/kaios/greg/node_modules/rrule/dist/esm/dateutil.js","resolved":"/home/arma7x/Desktop/New/kaios/greg/node_modules/rrule/dist/esm/helpers.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.dateutil = void 0;\n\nvar _helpers = require(\"./helpers\");\n\nvar __extends = void 0 && (void 0).__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\n/**\n * General date-related utilities.\n * Also handles several incompatibilities between JavaScript and Python\n *\n */\nvar dateutil;\nexports.dateutil = dateutil;\n\n(function (dateutil) {\n  dateutil.MONTH_DAYS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  /**\n   * Number of milliseconds of one day\n   */\n\n  dateutil.ONE_DAY = 1000 * 60 * 60 * 24;\n  /**\n   * @see: <http://docs.python.org/library/datetime.html#datetime.MAXYEAR>\n   */\n\n  dateutil.MAXYEAR = 9999;\n  /**\n   * Python uses 1-Jan-1 as the base for calculating ordinals but we don't\n   * want to confuse the JS engine with milliseconds > Number.MAX_NUMBER,\n   * therefore we use 1-Jan-1970 instead\n   */\n\n  dateutil.ORDINAL_BASE = new Date(Date.UTC(1970, 0, 1));\n  /**\n   * Python: MO-SU: 0 - 6\n   * JS: SU-SAT 0 - 6\n   */\n\n  dateutil.PY_WEEKDAYS = [6, 0, 1, 2, 3, 4, 5];\n  /**\n   * py_date.timetuple()[7]\n   */\n\n  dateutil.getYearDay = function (date) {\n    var dateNoTime = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());\n    return Math.ceil((dateNoTime.valueOf() - new Date(date.getUTCFullYear(), 0, 1).valueOf()) / dateutil.ONE_DAY) + 1;\n  };\n\n  dateutil.isLeapYear = function (year) {\n    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n  };\n  /**\n   * @return {Number} the date's timezone offset in ms\n   */\n\n\n  dateutil.tzOffset = function (date) {\n    return date.getTimezoneOffset() * 60 * 1000;\n  };\n  /**\n   * @see: <http://www.mcfedries.com/JavaScript/DaysBetween.asp>\n   */\n\n\n  dateutil.daysBetween = function (date1, date2) {\n    // The number of milliseconds in one day\n    // Convert both dates to milliseconds\n    var date1ms = date1.getTime() - dateutil.tzOffset(date1);\n    var date2ms = date2.getTime() - dateutil.tzOffset(date2); // Calculate the difference in milliseconds\n\n    var differencems = date1ms - date2ms; // Convert back to days and return\n\n    return Math.round(differencems / dateutil.ONE_DAY);\n  };\n  /**\n   * @see: <http://docs.python.org/library/datetime.html#datetime.date.toordinal>\n   */\n\n\n  dateutil.toOrdinal = function (date) {\n    return dateutil.daysBetween(date, dateutil.ORDINAL_BASE);\n  };\n  /**\n   * @see - <http://docs.python.org/library/datetime.html#datetime.date.fromordinal>\n   */\n\n\n  dateutil.fromOrdinal = function (ordinal) {\n    return new Date(dateutil.ORDINAL_BASE.getTime() + ordinal * dateutil.ONE_DAY);\n  };\n\n  dateutil.getMonthDays = function (date) {\n    var month = date.getUTCMonth();\n    return month === 1 && dateutil.isLeapYear(date.getUTCFullYear()) ? 29 : dateutil.MONTH_DAYS[month];\n  };\n  /**\n   * @return {Number} python-like weekday\n   */\n\n\n  dateutil.getWeekday = function (date) {\n    return dateutil.PY_WEEKDAYS[date.getUTCDay()];\n  };\n  /**\n   * @see: <http://docs.python.org/library/calendar.html#calendar.monthrange>\n   */\n\n\n  dateutil.monthRange = function (year, month) {\n    var date = new Date(Date.UTC(year, month, 1));\n    return [dateutil.getWeekday(date), dateutil.getMonthDays(date)];\n  };\n  /**\n   * @see: <http://docs.python.org/library/datetime.html#datetime.datetime.combine>\n   */\n\n\n  dateutil.combine = function (date, time) {\n    time = time || date;\n    return new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), time.getHours(), time.getMinutes(), time.getSeconds(), time.getMilliseconds()));\n  };\n\n  dateutil.clone = function (date) {\n    var dolly = new Date(date.getTime());\n    return dolly;\n  };\n\n  dateutil.cloneDates = function (dates) {\n    var clones = [];\n\n    for (var i = 0; i < dates.length; i++) {\n      clones.push(dateutil.clone(dates[i]));\n    }\n\n    return clones;\n  };\n  /**\n   * Sorts an array of Date or dateutil.Time objects\n   */\n\n\n  dateutil.sort = function (dates) {\n    dates.sort(function (a, b) {\n      return a.getTime() - b.getTime();\n    });\n  };\n\n  dateutil.timeToUntilString = function (time, utc) {\n    if (utc === void 0) {\n      utc = true;\n    }\n\n    var date = new Date(time);\n    return [(0, _helpers.padStart)(date.getUTCFullYear().toString(), 4, '0'), (0, _helpers.padStart)(date.getUTCMonth() + 1, 2, '0'), (0, _helpers.padStart)(date.getUTCDate(), 2, '0'), 'T', (0, _helpers.padStart)(date.getUTCHours(), 2, '0'), (0, _helpers.padStart)(date.getUTCMinutes(), 2, '0'), (0, _helpers.padStart)(date.getUTCSeconds(), 2, '0'), utc ? 'Z' : ''].join('');\n  };\n\n  dateutil.untilStringToDate = function (until) {\n    var re = /^(\\d{4})(\\d{2})(\\d{2})(T(\\d{2})(\\d{2})(\\d{2})Z?)?$/;\n    var bits = re.exec(until);\n    if (!bits) throw new Error(\"Invalid UNTIL value: \" + until);\n    return new Date(Date.UTC(parseInt(bits[1], 10), parseInt(bits[2], 10) - 1, parseInt(bits[3], 10), parseInt(bits[5], 10) || 0, parseInt(bits[6], 10) || 0, parseInt(bits[7], 10) || 0));\n  };\n\n  var Time =\n  /** @class */\n  function () {\n    function Time(hour, minute, second, millisecond) {\n      this.hour = hour;\n      this.minute = minute;\n      this.second = second;\n      this.millisecond = millisecond || 0;\n    }\n\n    Time.prototype.getHours = function () {\n      return this.hour;\n    };\n\n    Time.prototype.getMinutes = function () {\n      return this.minute;\n    };\n\n    Time.prototype.getSeconds = function () {\n      return this.second;\n    };\n\n    Time.prototype.getMilliseconds = function () {\n      return this.millisecond;\n    };\n\n    Time.prototype.getTime = function () {\n      return (this.hour * 60 * 60 + this.minute * 60 + this.second) * 1000 + this.millisecond;\n    };\n\n    return Time;\n  }();\n\n  dateutil.Time = Time;\n\n  var DateTime =\n  /** @class */\n  function (_super) {\n    __extends(DateTime, _super);\n\n    function DateTime(year, month, day, hour, minute, second, millisecond) {\n      var _this = _super.call(this, hour, minute, second, millisecond) || this;\n\n      _this.year = year;\n      _this.month = month;\n      _this.day = day;\n      return _this;\n    }\n\n    DateTime.prototype.getWeekday = function () {\n      return dateutil.getWeekday(new Date(this.getTime()));\n    };\n\n    DateTime.prototype.getTime = function () {\n      return new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, this.millisecond)).getTime();\n    };\n\n    DateTime.prototype.getDay = function () {\n      return this.day;\n    };\n\n    DateTime.prototype.getMonth = function () {\n      return this.month;\n    };\n\n    DateTime.prototype.getYear = function () {\n      return this.year;\n    };\n\n    DateTime.prototype.addYears = function (years) {\n      this.year += years;\n    };\n\n    DateTime.prototype.addMonths = function (months) {\n      this.month += months;\n\n      if (this.month > 12) {\n        var yearDiv = Math.floor(this.month / 12);\n        var monthMod = (0, _helpers.pymod)(this.month, 12);\n        this.month = monthMod;\n        this.year += yearDiv;\n\n        if (this.month === 0) {\n          this.month = 12;\n          --this.year;\n        }\n      }\n    };\n\n    DateTime.prototype.addWeekly = function (days, wkst) {\n      if (wkst > this.getWeekday()) {\n        this.day += -(this.getWeekday() + 1 + (6 - wkst)) + days * 7;\n      } else {\n        this.day += -(this.getWeekday() - wkst) + days * 7;\n      }\n\n      this.fixDay();\n    };\n\n    DateTime.prototype.addDaily = function (days) {\n      this.day += days;\n      this.fixDay();\n    };\n\n    DateTime.prototype.addHours = function (hours, filtered, byhour) {\n      var fixday = false;\n\n      if (filtered) {\n        // Jump to one iteration before next day\n        this.hour += Math.floor((23 - this.hour) / hours) * hours;\n      }\n\n      while (true) {\n        this.hour += hours;\n\n        var _a = (0, _helpers.divmod)(this.hour, 24),\n            dayDiv = _a.div,\n            hourMod = _a.mod;\n\n        if (dayDiv) {\n          this.hour = hourMod;\n          this.addDaily(dayDiv);\n          fixday = true;\n        }\n\n        if ((0, _helpers.empty)(byhour) || (0, _helpers.includes)(byhour, this.hour)) break;\n      }\n\n      return fixday;\n    };\n\n    DateTime.prototype.addMinutes = function (minutes, filtered, byhour, byminute) {\n      var fixday = false;\n\n      if (filtered) {\n        // Jump to one iteration before next day\n        this.minute += Math.floor((1439 - (this.hour * 60 + this.minute)) / minutes) * minutes;\n      }\n\n      while (true) {\n        this.minute += minutes;\n\n        var _a = (0, _helpers.divmod)(this.minute, 60),\n            hourDiv = _a.div,\n            minuteMod = _a.mod;\n\n        if (hourDiv) {\n          this.minute = minuteMod;\n          fixday = this.addHours(hourDiv, false, byhour);\n        }\n\n        if (((0, _helpers.empty)(byhour) || (0, _helpers.includes)(byhour, this.hour)) && ((0, _helpers.empty)(byminute) || (0, _helpers.includes)(byminute, this.minute))) {\n          break;\n        }\n      }\n\n      return fixday;\n    };\n\n    DateTime.prototype.addSeconds = function (seconds, filtered, byhour, byminute, bysecond) {\n      var fixday = false;\n\n      if (filtered) {\n        // Jump to one iteration before next day\n        this.second += Math.floor((86399 - (this.hour * 3600 + this.minute * 60 + this.second)) / seconds) * seconds;\n      }\n\n      while (true) {\n        this.second += seconds;\n\n        var _a = (0, _helpers.divmod)(this.second, 60),\n            minuteDiv = _a.div,\n            secondMod = _a.mod;\n\n        if (minuteDiv) {\n          this.second = secondMod;\n          fixday = this.addMinutes(minuteDiv, false, byhour, byminute);\n        }\n\n        if (((0, _helpers.empty)(byhour) || (0, _helpers.includes)(byhour, this.hour)) && ((0, _helpers.empty)(byminute) || (0, _helpers.includes)(byminute, this.minute)) && ((0, _helpers.empty)(bysecond) || (0, _helpers.includes)(bysecond, this.second))) {\n          break;\n        }\n      }\n\n      return fixday;\n    };\n\n    DateTime.prototype.fixDay = function () {\n      if (this.day <= 28) {\n        return;\n      }\n\n      var daysinmonth = dateutil.monthRange(this.year, this.month - 1)[1];\n\n      if (this.day <= daysinmonth) {\n        return;\n      }\n\n      while (this.day > daysinmonth) {\n        this.day -= daysinmonth;\n        ++this.month;\n\n        if (this.month === 13) {\n          this.month = 1;\n          ++this.year;\n\n          if (this.year > dateutil.MAXYEAR) {\n            return;\n          }\n        }\n\n        daysinmonth = dateutil.monthRange(this.year, this.month - 1)[1];\n      }\n    };\n\n    return DateTime;\n  }(Time);\n\n  dateutil.DateTime = DateTime;\n})(dateutil || (exports.dateutil = dateutil = {}));\n\nvar _default = dateutil;\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"eb80ada372e3464904427fcb1dff5fc5","cacheData":{"env":{}}}