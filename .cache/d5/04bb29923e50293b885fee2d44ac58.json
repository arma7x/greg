{"id":"../node_modules/rrule/dist/esm/helpers.js","dependencies":[{"name":"/home/arma7x/Desktop/New/kaios/greg/package.json","includedInParent":true,"mtime":1656032613002},{"name":"/home/arma7x/Desktop/New/kaios/greg/node_modules/rrule/package.json","includedInParent":true,"mtime":1655998719762}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.notEmpty = exports.isPresent = exports.isNumber = exports.isArray = exports.includes = exports.empty = exports.divmod = exports.clone = void 0;\nexports.padStart = padStart;\nexports.toArray = exports.split = exports.repeat = exports.range = exports.pymod = void 0;\n\n// =============================================================================\n// Helper functions\n// =============================================================================\nvar isPresent = function (value) {\n  return value !== null && value !== undefined;\n};\n\nexports.isPresent = isPresent;\n\nvar isNumber = function (value) {\n  return typeof value === 'number';\n};\n\nexports.isNumber = isNumber;\nvar isArray = Array.isArray;\n/**\n * Simplified version of python's range()\n */\n\nexports.isArray = isArray;\n\nvar range = function (start, end) {\n  if (end === void 0) {\n    end = start;\n  }\n\n  if (arguments.length === 1) {\n    end = start;\n    start = 0;\n  }\n\n  var rang = [];\n\n  for (var i = start; i < end; i++) rang.push(i);\n\n  return rang;\n};\n\nexports.range = range;\n\nvar clone = function (array) {\n  return [].concat(array);\n};\n\nexports.clone = clone;\n\nvar repeat = function (value, times) {\n  var i = 0;\n  var array = [];\n\n  if (isArray(value)) {\n    for (; i < times; i++) array[i] = [].concat(value);\n  } else {\n    for (; i < times; i++) array[i] = value;\n  }\n\n  return array;\n};\n\nexports.repeat = repeat;\n\nvar toArray = function (item) {\n  if (isArray(item)) {\n    return item;\n  }\n\n  return [item];\n};\n\nexports.toArray = toArray;\n\nfunction padStart(item, targetLength, padString) {\n  if (padString === void 0) {\n    padString = ' ';\n  }\n\n  var str = String(item);\n  targetLength = targetLength >> 0;\n\n  if (str.length > targetLength) {\n    return String(str);\n  }\n\n  targetLength = targetLength - str.length;\n\n  if (targetLength > padString.length) {\n    padString += repeat(padString, targetLength / padString.length);\n  }\n\n  return padString.slice(0, targetLength) + String(str);\n}\n/**\n * Python like split\n */\n\n\nvar split = function (str, sep, num) {\n  var splits = str.split(sep);\n  return num ? splits.slice(0, num).concat([splits.slice(num).join(sep)]) : splits;\n};\n/**\n * closure/goog/math/math.js:modulo\n * Copyright 2006 The Closure Library Authors.\n * The % operator in JavaScript returns the remainder of a / b, but differs from\n * some other languages in that the result will have the same sign as the\n * dividend. For example, -1 % 8 == -1, whereas in some other languages\n * (such as Python) the result would be 7. This function emulates the more\n * correct modulo behavior, which is useful for certain applications such as\n * calculating an offset index in a circular list.\n *\n * @param {number} a The dividend.\n * @param {number} b The divisor.\n * @return {number} a % b where the result is between 0 and b (either 0 <= x < b\n *     or b < x <= 0, depending on the sign of b).\n */\n\n\nexports.split = split;\n\nvar pymod = function (a, b) {\n  var r = a % b; // If r and b differ in sign, add b to wrap the result to the correct sign.\n\n  return r * b < 0 ? r + b : r;\n};\n/**\n * @see: <http://docs.python.org/library/functions.html#divmod>\n */\n\n\nexports.pymod = pymod;\n\nvar divmod = function (a, b) {\n  return {\n    div: Math.floor(a / b),\n    mod: pymod(a, b)\n  };\n};\n\nexports.divmod = divmod;\n\nvar empty = function (obj) {\n  return !isPresent(obj) || obj.length === 0;\n};\n/**\n * Python-like boolean\n * @return {Boolean} value of an object/primitive, taking into account\n * the fact that in Python an empty list's/tuple's\n * boolean value is False, whereas in JS it's true\n */\n\n\nexports.empty = empty;\n\nvar notEmpty = function (obj) {\n  return !empty(obj);\n};\n/**\n * Return true if a value is in an array\n */\n\n\nexports.notEmpty = notEmpty;\n\nvar includes = function (arr, val) {\n  return notEmpty(arr) && arr.indexOf(val) !== -1;\n};\n\nexports.includes = includes;"},"sourceMaps":null,"error":null,"hash":"1fc96e50d1eb2fdc72afcc367db3e1e3","cacheData":{"env":{}}}