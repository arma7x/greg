{"id":"../node_modules/rrule/dist/esm/iterinfo.js","dependencies":[{"name":"/home/arma7x/Desktop/New/kaios/greg/package.json","includedInParent":true,"mtime":1656032613002},{"name":"/home/arma7x/Desktop/New/kaios/greg/node_modules/rrule/package.json","includedInParent":true,"mtime":1655998719762},{"name":"./masks","loc":{"line":1,"column":121,"index":121},"parent":"/home/arma7x/Desktop/New/kaios/greg/node_modules/rrule/dist/esm/iterinfo.js","resolved":"/home/arma7x/Desktop/New/kaios/greg/node_modules/rrule/dist/esm/masks.js"},{"name":"./rrule","loc":{"line":2,"column":18,"index":150},"parent":"/home/arma7x/Desktop/New/kaios/greg/node_modules/rrule/dist/esm/iterinfo.js","resolved":"/home/arma7x/Desktop/New/kaios/greg/node_modules/rrule/dist/esm/rrule.js"},{"name":"./dateutil","loc":{"line":3,"column":21,"index":182},"parent":"/home/arma7x/Desktop/New/kaios/greg/node_modules/rrule/dist/esm/iterinfo.js","resolved":"/home/arma7x/Desktop/New/kaios/greg/node_modules/rrule/dist/esm/dateutil.js"},{"name":"./helpers","loc":{"line":4,"column":75,"index":271},"parent":"/home/arma7x/Desktop/New/kaios/greg/node_modules/rrule/dist/esm/iterinfo.js","resolved":"/home/arma7x/Desktop/New/kaios/greg/node_modules/rrule/dist/esm/helpers.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _masks = require(\"./masks\");\n\nvar _rrule = _interopRequireDefault(require(\"./rrule\"));\n\nvar _dateutil = _interopRequireDefault(require(\"./dateutil\"));\n\nvar _helpers = require(\"./helpers\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// =============================================================================\n// Iterinfo\n// =============================================================================\nvar Iterinfo =\n/** @class */\nfunction () {\n  function Iterinfo(rrule) {\n    this.yearlen = 365;\n    this.nextyearlen = 365;\n    this.rrule = rrule;\n    this.mmask = null;\n    this.mrange = null;\n    this.mdaymask = null;\n    this.nmdaymask = null;\n    this.wdaymask = null;\n    this.wnomask = null;\n    this.nwdaymask = null;\n    this.eastermask = null;\n  }\n\n  Iterinfo.prototype.easter = function (y, offset) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    var a = y % 19;\n    var b = Math.floor(y / 100);\n    var c = y % 100;\n    var d = Math.floor(b / 4);\n    var e = b % 4;\n    var f = Math.floor((b + 8) / 25);\n    var g = Math.floor((b - f + 1) / 3);\n    var h = Math.floor(19 * a + b - d - g + 15) % 30;\n    var i = Math.floor(c / 4);\n    var k = c % 4;\n    var l = Math.floor(32 + 2 * e + 2 * i - h - k) % 7;\n    var m = Math.floor((a + 11 * h + 22 * l) / 451);\n    var month = Math.floor((h + l - 7 * m + 114) / 31);\n    var day = (h + l - 7 * m + 114) % 31 + 1;\n    var date = Date.UTC(y, month - 1, day + offset);\n    var yearStart = Date.UTC(y, 0, 1);\n    return [Math.ceil((date - yearStart) / (1000 * 60 * 60 * 24))];\n  };\n\n  Iterinfo.prototype.rebuild = function (year, month) {\n    var rr = this.rrule;\n\n    if (year !== this.lastyear) {\n      this.rebuildYear(year);\n    }\n\n    if ((0, _helpers.notEmpty)(rr.options.bynweekday) && (month !== this.lastmonth || year !== this.lastyear)) {\n      this.rebuildMonth(year, month);\n    }\n\n    if ((0, _helpers.isPresent)(rr.options.byeaster)) {\n      this.eastermask = this.easter(year, rr.options.byeaster);\n    }\n  };\n\n  Iterinfo.prototype.rebuildYear = function (year) {\n    var rr = this.rrule;\n    this.yearlen = _dateutil.default.isLeapYear(year) ? 366 : 365;\n    this.nextyearlen = _dateutil.default.isLeapYear(year + 1) ? 366 : 365;\n    var firstyday = new Date(Date.UTC(year, 0, 1));\n    this.yearordinal = _dateutil.default.toOrdinal(firstyday);\n    this.yearweekday = _dateutil.default.getWeekday(firstyday);\n\n    var wday = _dateutil.default.getWeekday(firstyday);\n\n    if (this.yearlen === 365) {\n      this.mmask = _masks.M365MASK;\n      this.mdaymask = _masks.MDAY365MASK;\n      this.nmdaymask = _masks.NMDAY365MASK;\n      this.wdaymask = _masks.WDAYMASK.slice(wday);\n      this.mrange = _masks.M365RANGE;\n    } else {\n      this.mmask = _masks.M366MASK;\n      this.mdaymask = _masks.MDAY366MASK;\n      this.nmdaymask = _masks.NMDAY366MASK;\n      this.wdaymask = _masks.WDAYMASK.slice(wday);\n      this.mrange = _masks.M366RANGE;\n    }\n\n    if ((0, _helpers.empty)(rr.options.byweekno)) {\n      this.wnomask = null;\n    } else {\n      this.wnomask = (0, _helpers.repeat)(0, this.yearlen + 7);\n      var no1wkst = void 0;\n      var firstwkst = void 0;\n      var wyearlen = void 0;\n      no1wkst = firstwkst = (0, _helpers.pymod)(7 - this.yearweekday + rr.options.wkst, 7);\n\n      if (no1wkst >= 4) {\n        no1wkst = 0; // Number of days in the year, plus the days we got\n        // from last year.\n\n        wyearlen = this.yearlen + (0, _helpers.pymod)(this.yearweekday - rr.options.wkst, 7);\n      } else {\n        // Number of days in the year, minus the days we\n        // left in last year.\n        wyearlen = this.yearlen - no1wkst;\n      }\n\n      var div = Math.floor(wyearlen / 7);\n      var mod = (0, _helpers.pymod)(wyearlen, 7);\n      var numweeks = Math.floor(div + mod / 4);\n\n      for (var j = 0; j < rr.options.byweekno.length; j++) {\n        var i = void 0;\n        var n = rr.options.byweekno[j];\n\n        if (n < 0) {\n          n += numweeks + 1;\n        }\n\n        if (!(n > 0 && n <= numweeks)) {\n          continue;\n        }\n\n        if (n > 1) {\n          i = no1wkst + (n - 1) * 7;\n\n          if (no1wkst !== firstwkst) {\n            i -= 7 - firstwkst;\n          }\n        } else {\n          i = no1wkst;\n        }\n\n        for (var k = 0; k < 7; k++) {\n          this.wnomask[i] = 1;\n          i++;\n          if (this.wdaymask[i] === rr.options.wkst) break;\n        }\n      }\n\n      if ((0, _helpers.includes)(rr.options.byweekno, 1)) {\n        // Check week number 1 of next year as well\n        // orig-TODO : Check -numweeks for next year.\n        var i = no1wkst + numweeks * 7;\n        if (no1wkst !== firstwkst) i -= 7 - firstwkst;\n\n        if (i < this.yearlen) {\n          // If week starts in next year, we\n          // don't care about it.\n          for (var j = 0; j < 7; j++) {\n            this.wnomask[i] = 1;\n            i += 1;\n            if (this.wdaymask[i] === rr.options.wkst) break;\n          }\n        }\n      }\n\n      if (no1wkst) {\n        // Check last week number of last year as\n        // well. If no1wkst is 0, either the year\n        // started on week start, or week number 1\n        // got days from last year, so there are no\n        // days from last year's last week number in\n        // this year.\n        var lnumweeks = void 0;\n\n        if (!(0, _helpers.includes)(rr.options.byweekno, -1)) {\n          var lyearweekday = _dateutil.default.getWeekday(new Date(Date.UTC(year - 1, 0, 1)));\n\n          var lno1wkst = (0, _helpers.pymod)(7 - lyearweekday.valueOf() + rr.options.wkst, 7);\n          var lyearlen = _dateutil.default.isLeapYear(year - 1) ? 366 : 365;\n\n          if (lno1wkst >= 4) {\n            lno1wkst = 0;\n            lnumweeks = Math.floor(52 + (0, _helpers.pymod)(lyearlen + (0, _helpers.pymod)(lyearweekday - rr.options.wkst, 7), 7) / 4);\n          } else {\n            lnumweeks = Math.floor(52 + (0, _helpers.pymod)(this.yearlen - no1wkst, 7) / 4);\n          }\n        } else {\n          lnumweeks = -1;\n        }\n\n        if ((0, _helpers.includes)(rr.options.byweekno, lnumweeks)) {\n          for (var i = 0; i < no1wkst; i++) this.wnomask[i] = 1;\n        }\n      }\n    }\n  };\n\n  Iterinfo.prototype.rebuildMonth = function (year, month) {\n    var rr = this.rrule;\n    var ranges = [];\n\n    if (rr.options.freq === _rrule.default.YEARLY) {\n      if ((0, _helpers.notEmpty)(rr.options.bymonth)) {\n        for (var j = 0; j < rr.options.bymonth.length; j++) {\n          month = rr.options.bymonth[j];\n          ranges.push(this.mrange.slice(month - 1, month + 1));\n        }\n      } else {\n        ranges = [[0, this.yearlen]];\n      }\n    } else if (rr.options.freq === _rrule.default.MONTHLY) {\n      ranges = [this.mrange.slice(month - 1, month + 1)];\n    }\n\n    if ((0, _helpers.notEmpty)(ranges)) {\n      // Weekly frequency won't get here, so we may not\n      // care about cross-year weekly periods.\n      this.nwdaymask = (0, _helpers.repeat)(0, this.yearlen);\n\n      for (var j = 0; j < ranges.length; j++) {\n        var rang = ranges[j];\n        var first = rang[0];\n        var last = rang[1];\n        last -= 1;\n\n        for (var k = 0; k < rr.options.bynweekday.length; k++) {\n          var i = void 0;\n          var wday = rr.options.bynweekday[k][0];\n          var n = rr.options.bynweekday[k][1];\n\n          if (n < 0) {\n            i = last + (n + 1) * 7;\n            i -= (0, _helpers.pymod)(this.wdaymask[i] - wday, 7);\n          } else {\n            i = first + (n - 1) * 7;\n            i += (0, _helpers.pymod)(7 - this.wdaymask[i] + wday, 7);\n          }\n\n          if (first <= i && i <= last) this.nwdaymask[i] = 1;\n        }\n      }\n    }\n\n    this.lastyear = year;\n    this.lastmonth = month;\n  };\n\n  Iterinfo.prototype.ydayset = function () {\n    return [(0, _helpers.range)(this.yearlen), 0, this.yearlen];\n  };\n\n  Iterinfo.prototype.mdayset = function (_, month, __) {\n    var start = this.mrange[month - 1];\n    var end = this.mrange[month];\n    var set = (0, _helpers.repeat)(null, this.yearlen);\n\n    for (var i = start; i < end; i++) set[i] = i;\n\n    return [set, start, end];\n  };\n\n  Iterinfo.prototype.wdayset = function (year, month, day) {\n    // We need to handle cross-year weeks here.\n    var set = (0, _helpers.repeat)(null, this.yearlen + 7);\n    var i = _dateutil.default.toOrdinal(new Date(Date.UTC(year, month - 1, day))) - this.yearordinal;\n    var start = i;\n\n    for (var j = 0; j < 7; j++) {\n      set[i] = i;\n      ++i;\n      if (this.wdaymask[i] === this.rrule.options.wkst) break;\n    }\n\n    return [set, start, i];\n  };\n\n  Iterinfo.prototype.ddayset = function (year, month, day) {\n    var set = (0, _helpers.repeat)(null, this.yearlen);\n    var i = _dateutil.default.toOrdinal(new Date(Date.UTC(year, month - 1, day))) - this.yearordinal;\n    set[i] = i;\n    return [set, i, i + 1];\n  };\n\n  Iterinfo.prototype.htimeset = function (hour, minute, second, millisecond) {\n    var set = [];\n    var rr = this.rrule;\n\n    for (var i = 0; i < rr.options.byminute.length; i++) {\n      minute = rr.options.byminute[i];\n\n      for (var j = 0; j < rr.options.bysecond.length; j++) {\n        second = rr.options.bysecond[j];\n        set.push(new _dateutil.default.Time(hour, minute, second, millisecond));\n      }\n    }\n\n    _dateutil.default.sort(set);\n\n    return set;\n  };\n\n  Iterinfo.prototype.mtimeset = function (hour, minute, second, millisecond) {\n    var set = [];\n    var rr = this.rrule;\n\n    for (var j = 0; j < rr.options.bysecond.length; j++) {\n      second = rr.options.bysecond[j];\n      set.push(new _dateutil.default.Time(hour, minute, second, millisecond));\n    }\n\n    _dateutil.default.sort(set);\n\n    return set;\n  };\n\n  Iterinfo.prototype.stimeset = function (hour, minute, second, millisecond) {\n    return [new _dateutil.default.Time(hour, minute, second, millisecond)];\n  };\n\n  return Iterinfo;\n}();\n\nvar _default = Iterinfo;\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"89067d4ea996b4b5831221bdd2ce55f6","cacheData":{"env":{}}}